{"data":{"site":{"siteMetadata":{"title":"Raquel Moss","description":"Hire Raquel Moss, experienced full-stack web developer","author":{"name":"Raquel Moss"},"keywords":["Video Blogger"]}},"mdx":{"frontmatter":{"title":"Better Code Review","date":"January 10, 2018","author":null,"banner":null,"slug":"/better-code-review","keywords":["learn to code","programming","code review"]},"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `I recently read an article by Max Bittker called `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://maxbittker.com/code-review/\"\n      }\n    }, `\"How to Review Code\nYou Don't\nUnderstand\"`), `, and it got me to thinking about times when I've been\ntasked with doing just that.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `One of the troubles I have with code review is understanding the context\naround a change. Given a diff, I can work through it line-by-line and\nunderstand most of what's going on there, probably. At least, I can\nunderstand the `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `mechanics`), ` of it. But is that the same as understanding\nwhat the code is trying to achieve? In my opinion, no.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Since becoming a developer, one of the struggles I've had with reading\ncode is that whatever I'm looking at, I'm seeing the `, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `solution`), `, not the\nproblem. And in fact, I'm only seeing one particular solution, the one\nI'm tasked with reviewing.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `When reviewing code, I want to give thoughtful suggestions, learn\nsomething new, and pick up bugs that I am able to see. (In Ruby, 90% of\nthe time I'm asking \"Hey, do you want to do a nil check\nhere?\").`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `So, how can I do that when I am only seeing the output of (usually) one\ndeveloper's understanding, problem-solving process, and personal style?\nIt's hard --- arguably one of the harder parts of my job. Lacking\ncopious code comments, or some sort narration available to me while I\nread the code (imagine that --- like director's commentary for code),\nall of that important context gets lost.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Assuming that we're not going to overhaul our team's processes entirely,\nor build better code-reviewing tools from the ground up, what are some\nthings we could go ahead and do tomorrow at work to improve our code\nreview experience?`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Ask the submitter to review the code`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If your colleague hasn't already self-reviewed their diff and left\nin-line comments, ask them to do so. This will provide some valuable\ninsight --- why they made a particular choice, what they struggled with,\nwhy something might seem overly complex. They might point out particular\nareas they'd like reviewers to focus on, or point to areas where they\nmight be unsure about their decision-making. This will go a small part\nof the way towards capturing the developer's thought process as they\nwrote the code.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Seek to understand what the developer was trying to achieve`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If your workplace is like mine, you might start a code review with a\npull request, a user story, some mock-ups, and a general idea of the\nlarger context surrounding the piece of work.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `We don't live in a perfect world, though. Perhaps the user story will be\nvague (I'm yet to find a team that writes impeccable stories). Maybe\nthere's no mock-ups, and maybe you're not too familiar around the\ncontext.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `So before proceeding, seek to understand.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The gotcha here getting to the point where you have the right amount of\nunderstanding. Sometimes, a story or PR's description might be too\nbroad.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `For example, you might know that the overarching goal is `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `Display a\nuser's address on their invoice PDF`), `. Great, that's what this code is\ngoing to do, right?`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `What you might not know, is that a user's address is owned by another\nservice, and the app that you're looking at has to request that\ninformation. So, the developer has had to think about distributed\ntransactions, data integrity, and gracefully handling HTTP request\nfailures. Perhaps they've thought about where this code should sit, and\nchosen one option of several.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `You need to ask some questions to get enough context.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `What sort of approach did you take?`), ` is a good question to ask your\ncolleague. `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `Did you explore any other approaches and decide against\nthem?`), ` is another good one.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Follow-on questions might explore the trade-offs that they made. If\nyou're newer to being a developer, that might sound intimidating, but it\ndoesn't have to be. `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `Why?`), ` is good follow-up question. It might even\nbe a good idea to do a `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://en.wikipedia.org/wiki/5_Whys\"\n      }\n    }, `5\nWhys`), ` exercise.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Whatever you do, get into the habit of asking questions before reviewing\nthe pull request.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Go through the code on your own`, `*`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Armed with the submitter's self-review, and your understanding of the\napproach they took, read through the code, and leave in-line comments.\nThey could be questions, or notes to yourself, or feedback for the\nsubmitter.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `I particularly like Github's feature where you're able to 'stage' all of\nyour review notes and then submit them all at once. This leaves me free\nto write notes to myself, delete any questions that are answered further\ndown the diff (`, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://coppermind.net/wiki/RAFO\"\n      }\n    }, `RAFO`), `!), and edit my notes without flooding the submitter\nwith emails.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Go through the code with them, if possible`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `In person, ideally. Get answers to your questions and discuss any\nchanges to the work.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This is also an opportunity to talk about alternate approaches, which\nactually leads me back to my previous `, `[conundrum]`, ` with code reviews.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `When you're reading code that's been submitted for review, you're seeing\none solution to the problem at hand. `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `One`), ` solution. When you're\nlooking at the solution, it's hard to consider other possible solutions.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `I've found that it's easier with more experience, but for newer\ndevelopers, or for developers reviewing code that's very different from\ntheir usual wheelhouse, it can be very tricky to think outside what has\nalready been presented to you. It's like the `, React.createElement(MDXTag, {\n      name: \"a\",\n      components: components,\n      parentName: \"p\",\n      props: {\n        \"href\": \"https://en.wikipedia.org/wiki/Einstellung_effect\"\n      }\n    }, `Einstellung\nEffect`), `.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If you're reviewing a pull request, and you're finding it hard to\nconsider other approaches, talk to the submitter. Ask them: `, React.createElement(MDXTag, {\n      name: \"strong\",\n      components: components,\n      parentName: \"p\"\n    }, `Did you\nconsider other ways to do this? What were they?`)), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `If it turns out they hadn't considered any other ways to approach the\nproblem, and you haven't thought of any either, that's okay. It's good\nto get into the habit of asking those questions anyway.`), React.createElement(MDXTag, {\n      name: \"h3\",\n      components: components\n    }, `Follow up on any discussed changes, then give it the tick!`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Hopefully by taking this approach, you've both learned something.\nPerhaps you've gained more understanding of your domain, and the\ncode-base. You and the submitter might have talked about different\napproaches to solving the problem, or at least spent two minutes trying\nto think of a different approach. Ka pai 😄.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `This isn't the approach that I would take with every pull request. Some,\nblessedly, are more straightforward than others! But if you find\nyourself tasked with reviewing something that's quite chunky, consider\ntaking some of these ideas and giving them a try.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"em\",\n      components: components,\n      parentName: \"p\"\n    }, `*`, `If it's a large changeset, ask the submitter if they can break it\ndown for you any more --- not necessarily into separate PRs (though that\nmight be desirable if it's doable), but perhaps they could take you\nthrough a slice of the work, in whatever way makes sense. What we really\nneed is a better tool for reasoning about code diffs, but that's a blog\npost for another day.`)));\n  }\n\n}"}}},"pageContext":{"id":"92c3dcd4-41d2-56d1-8e11-5a74516c5857","prev":{"id":"e93bc5a0-7a94-5842-b1da-c539d7234d40","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Read my thoughts on state over at  egghead","fields":{"title":"What is State? Why do I need to manage it?","slug":"/what-is-state","date":"2018-09-13T20:17:42+00:00"},"code":{"scope":""}},"next":{"id":"19ea2b19-4c2a-57a1-a609-fb5c4772acfe","parent":{"name":"index","sourceInstanceName":"blog"},"excerpt":"Before I became a programmer, I was a teacher. For the most part, I taught academic English to speakers of other languages at a University. Although I’ve switched careers, I find that my teaching experience becomes applicable very frequently in my…","fields":{"title":"Creating a Welcoming Space for Beginners","slug":"/creating-a-welcoming-space-for-beginners","date":"2016-03-19T18:16:21+00:00"},"code":{"scope":""}}}}