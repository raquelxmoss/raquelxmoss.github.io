{"version":3,"sources":["webpack:///./src/components/Share.js","webpack:///./src/templates/post.js","webpack:///./src/components/SEO/SchemaOrg.js","webpack:///./src/components/SEO/index.js"],"names":["Share","_ref3","url","title","twitterHandle","Object","core_browser_esm","css","_ref","theme","colors","gray","TwitterShareButton","quote","via","split","join","FacebookShareButton","_ref2","Post","_ref3$data","data","site","mdx","_ref3$pageContext","pageContext","author","next","prev","frontmatter","config","date","banner","Layout","SEO","isBlogPost","post_ref","Container","post_ref2","fonts","regular","bpMaxSM","gatsby_image_default","a","sizes","childImageSharp","fluid","alt","siteMetadata","keywords","mdx_renderer_default","code","body","noVerticalPadding","components_Share","siteUrl","slug","pageQuery","React","memo","canonicalUrl","datePublished","defaultTitle","description","image","organization","baseSchema","@context","@type","name","alternateName","schema","concat","itemListElement","position","item","@id","headline","publisher","logo","mainEntityOfPage","Helmet_default","type","JSON","stringify","postData","_ref$frontmatter","postImage","gatsby_browser_entry","query","render","seo","postMeta","childMarkdownRemark","siteTitle","path","sep","react_default","Fragment","content","property","social","fbAppID","twitter","SchemaOrg","_3550155404","propTypes","PropTypes","bool","shape","any","excerpt","string","defaultProps"],"mappings":"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","file":"component---src-templates-post-js-8e3512393d90d6c919de.js","sourcesContent":["import React from 'react'\nimport { css } from '@emotion/core'\nimport theme from '../../config/theme'\n\nimport { TwitterShareButton, FacebookShareButton } from 'react-share'\n\nconst Share = ({ url, title, twitterHandle }) => (\n  <div\n    css={css`\n      display: flex;\n      align-items: center;\n      justify-content: flex-start;\n      div {\n        margin-right: 20px;\n        cursor: pointer;\n      }\n      span {\n        margin-right: 20px;\n        font-size: 70%;\n        text-transform: uppercase;\n        line-height: 2.5;\n        opacity: 0.7;\n      }\n    `}\n  >\n    <div\n      css={css`\n        flex-grow: 1;\n        border-top: 1px solid ${theme.colors.gray};\n      `}\n    />\n    <span>Share article</span>\n    <TwitterShareButton\n      url={url}\n      quote={title}\n      via={twitterHandle.split('@').join('')}\n    >\n      Twitter\n    </TwitterShareButton>\n    <FacebookShareButton\n      url={url}\n      quote={title}\n      via={twitterHandle.split('@').join('')}\n      css={css`\n        cursor: pointer;\n      `}\n    >\n      Facebook\n    </FacebookShareButton>\n  </div>\n)\n\nexport default Share\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport Img from 'gatsby-image'\nimport MDXRenderer from 'gatsby-mdx/mdx-renderer'\nimport SEO from 'components/SEO'\nimport { css } from '@emotion/core'\nimport Container from 'components/Container'\nimport Layout from '../components/Layout'\nimport { fonts } from '../lib/typography'\nimport Share from '../components/Share'\nimport config from '../../config/website'\nimport { bpMaxSM } from '../lib/breakpoints'\n\nexport default function Post({\n  data: { site, mdx },\n  pageContext: { next, prev },\n}) {\n  const author = mdx.frontmatter.author || config.author\n  const date = mdx.frontmatter.date\n  const title = mdx.frontmatter.title\n  const banner = mdx.frontmatter.banner\n\n  return (\n    <Layout site={site} frontmatter={mdx.frontmatter}>\n      <SEO frontmatter={mdx.frontmatter} isBlogPost />\n      <article\n        css={css`\n          width: 100%;\n          display: flex;\n        `}\n      >\n        <Container>\n          <h1\n            css={css`\n              text-align: center;\n              margin-bottom: 20px;\n            `}\n          >\n            {title}\n          </h1>\n          <div\n            css={css`\n              display: flex;\n              justify-content: center;\n              margin-bottom: 20px;\n              h3,\n              span {\n                text-align: center;\n                font-size: 15px;\n                opacity: 0.6;\n                font-family: ${fonts.regular}, sans-serif;\n                font-weight: normal;\n                margin: 0 5px;\n              }\n            `}\n          >\n            {author && <h3>{author}</h3>}\n            {author && <span>â€”</span>}\n            {date && <h3>{date}</h3>}\n          </div>\n          {banner && (\n            <div\n              css={css`\n                padding: 30px;\n                ${bpMaxSM} {\n                  padding: 0;\n                }\n              `}\n            >\n              <Img\n                sizes={banner.childImageSharp.fluid}\n                alt={site.siteMetadata.keywords.join(', ')}\n              />\n            </div>\n          )}\n          <br />\n          <MDXRenderer>{mdx.code.body}</MDXRenderer>\n        </Container>\n        {/* <SubscribeForm /> */}\n      </article>\n      <Container noVerticalPadding>\n        <Share\n          url={`${config.siteUrl}/${mdx.frontmatter.slug}/`}\n          title={title}\n          twitterHandle={config.twitterHandle}\n        />\n        <br />\n      </Container>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($id: String!) {\n    site {\n      ...site\n    }\n    mdx(fields: { id: { eq: $id } }) {\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        author\n        banner {\n          childImageSharp {\n            fluid(maxWidth: 900) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n        slug\n        keywords\n      }\n      code {\n        body\n      }\n    }\n  }\n`\n","import React from 'react'\nimport Helmet from 'react-helmet'\n\nexport default React.memo(\n  ({\n    author,\n    canonicalUrl,\n    datePublished,\n    defaultTitle,\n    description,\n    image,\n    isBlogPost,\n    organization,\n    title,\n    url,\n  }) => {\n    const baseSchema = [\n      {\n        '@context': 'http://schema.org',\n        '@type': 'WebSite',\n        url,\n        name: title,\n        alternateName: defaultTitle,\n      },\n    ]\n\n    const schema = isBlogPost\n      ? [\n          ...baseSchema,\n          {\n            '@context': 'http://schema.org',\n            '@type': 'BreadcrumbList',\n            itemListElement: [\n              {\n                '@type': 'ListItem',\n                position: 1,\n                item: {\n                  '@id': url,\n                  name: title,\n                  image,\n                },\n              },\n            ],\n          },\n          {\n            '@context': 'http://schema.org',\n            '@type': 'BlogPosting',\n            url,\n            name: title,\n            alternateName: defaultTitle,\n            headline: title,\n            image: {\n              '@type': 'ImageObject',\n              url: image,\n            },\n            description,\n            author: {\n              '@type': 'Person',\n              name: author.name,\n            },\n            publisher: {\n              '@type': 'Organization',\n              url: organization.url,\n              logo: organization.logo,\n              name: organization.name,\n            },\n            mainEntityOfPage: {\n              '@type': 'WebSite',\n              '@id': canonicalUrl,\n            },\n            datePublished,\n          },\n        ]\n      : baseSchema\n\n    return (\n      <Helmet>\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">{JSON.stringify(schema)}</script>\n      </Helmet>\n    )\n  },\n)\n","import path from 'path'\nimport React from 'react'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport SchemaOrg from './SchemaOrg'\nimport config from '../../../config/website'\n\nconst SEO = ({ postData, frontmatter = {}, postImage, isBlogPost }) => (\n  <StaticQuery\n    query={graphql`\n      {\n        site {\n          siteMetadata {\n            title\n            description\n            canonicalUrl\n            image\n            author {\n              name\n            }\n            organization {\n              name\n              url\n              logo\n            }\n            social {\n              twitter\n              fbAppID\n            }\n          }\n        }\n      }\n    `}\n    render={({ site: { siteMetadata: seo } }) => {\n      const postMeta =\n        frontmatter || postData.childMarkdownRemark.frontmatter || {}\n      const title = isBlogPost ? postMeta.title : config.siteTitle\n      const description = postMeta.description || seo.description\n      const image = postImage ? `${seo.canonicalUrl}${postImage}` : seo.image\n      const url = postMeta.slug\n        ? `${seo.canonicalUrl}${path.sep}${postMeta.slug}`\n        : seo.canonicalUrl\n      const datePublished = isBlogPost ? postMeta.datePublished : false\n\n      return (\n        <React.Fragment>\n          <Helmet>\n            {/* General tags */}\n            <title>{title}</title>\n            <meta name=\"description\" content={description} />\n            <meta name=\"image\" content={image} />\n\n            {/* OpenGraph tags */}\n            <meta property=\"og:url\" content={url} />\n            {isBlogPost ? <meta property=\"og:type\" content=\"article\" /> : null}\n            <meta property=\"og:title\" content={title} />\n            <meta property=\"og:description\" content={description} />\n            <meta property=\"og:image\" content={image} />\n            <meta property=\"fb:app_id\" content={seo.social.fbAppID} />\n\n            {/* Twitter Card tags */}\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            <meta name=\"twitter:creator\" content={seo.social.twitter} />\n            <meta name=\"twitter:title\" content={title} />\n            <meta name=\"twitter:description\" content={description} />\n            <meta name=\"twitter:image\" content={image} />\n          </Helmet>\n          <SchemaOrg\n            isBlogPost={isBlogPost}\n            url={url}\n            title={title}\n            image={image}\n            description={description}\n            datePublished={datePublished}\n            canonicalUrl={seo.canonicalUrl}\n            author={seo.author}\n            organization={seo.organization}\n            defaultTitle={seo.title}\n          />\n        </React.Fragment>\n      )\n    }}\n  />\n)\n\nSEO.propTypes = {\n  isBlogPost: PropTypes.bool,\n  postData: PropTypes.shape({\n    childMarkdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.any,\n      excerpt: PropTypes.any,\n    }),\n  }),\n  postImage: PropTypes.string,\n}\n\nSEO.defaultProps = {\n  isBlogPost: false,\n  postData: { childMarkdownRemark: {} },\n  postImage: null,\n}\n\nexport default SEO\n"],"sourceRoot":""}