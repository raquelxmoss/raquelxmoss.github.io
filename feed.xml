<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2019-04-21T15:46:23+02:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>How I got better at journalling</title>
    <link rel="alternate" href="http://blog.url.com/getting-better-at-journalling.html"/>
    <id>http://blog.url.com/getting-better-at-journalling.html</id>
    <published>2019-04-21T15:46:23+02:00</published>
    <updated>2019-07-26T20:23:34+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="how-i-got-better-at-journalling"&gt;How I got better at journalling&lt;/h1&gt;

&lt;p&gt;Over the last 18 months or so, I’ve been journalling regularly and it’s made a huge difference to my mental health. My therapist is thrilled but unsurprised (lol).&lt;/p&gt;

&lt;p&gt;I’ve always found a lot of value in processing thoughts and feelings by writing them down, but in the past I only really turned to that when my situation was &lt;em&gt;really&lt;/em&gt; dire. That resulted in very fragmented journalling, and because I lacked the habit, journalling wasn’t the tool I’d think to reach for first, even when it really would have helped me!&lt;/p&gt;

&lt;p&gt;These days it’s my port-of-call and I journal almost every day. Here’s how I did it:&lt;/p&gt;

&lt;h3 id="i-thought-really-hard-about-why-i-avoided-journalling-even-when-i-knew-it-was-good-for-me"&gt;I thought really hard about why I avoided journalling, even when I knew it was good for me.&lt;/h3&gt;

&lt;p&gt;This involved a lot of thinking (obviously) and a lot of alone time. I’d think about this in the shower, while making coffee, etc. Here’s a few things that came up:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I had a myth embedded in my brain that my journal should be a fluent account of happenings in my life. That meant that when I picked up my journal after a long time of inactivity, I’d feel obligated to ‘catch up’ my journal on what had been happening in my life, as though catching up with an old friend who I hadn’t spoken to in ages. By the time I’d done that, I would be exhausted and unmotivated to write about whatever issue was actually bothering me.&lt;/li&gt;
  &lt;li&gt;I worried about my writing being bad, or embarrassing, or downright stupid&lt;/li&gt;
  &lt;li&gt;The hardest one to admit was that I felt like if I wrote my thoughts and feelings down, that would make them real! This is the most important one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="i-used-tools-i-learned-in-therapy-to-challenge-each-of-those-obstacles"&gt;I used tools I learned in therapy to challenge each of those obstacles.&lt;/h3&gt;

&lt;p&gt;My therapist and I worked a lot on CBT to change unhelpful thought patterns. The process we used was first to notice, then to challenge, and then to reframe. I had already done step one, noticing, which resulted in the bullet points above. My next step was to take each thought and challenge it. I usually do that by saying to myself “That’s interesting, why do you think that?” (usually in my therapist’s voice in my head, hah)&lt;/p&gt;

&lt;p&gt;So:&lt;/p&gt;

&lt;h4 id="why-do-you-think-that-journals-should-be-a-fluent-account-of-what-happens-in-your-life"&gt;Why do you think that journals should be a fluent account of what happens in your life?&lt;/h4&gt;

&lt;p&gt;I guess because that’s what’s commonly understood to be a journal? That’s how they’re portrayed in the media. If anyone else were to read my journal, it wouldn’t make much sense, because they wouldn’t have the context of what’s been going on! So, it feels like I have to write down the catch ups.&lt;/p&gt;

&lt;h4 id="why-do-you-worry-about-your-writing-being-bad-embarrassing-or-stupid"&gt;Why do you worry about your writing being bad, embarrassing, or stupid?&lt;/h4&gt;

&lt;p&gt;I don’t like being seen as stupid or weak. I don’t want anyone to think that about me and I don’t want to think those things about myself. So I need to hide all evidence of my stupidity and weakness, not take notes on it!&lt;/p&gt;

&lt;h4 id="why-are-you-worried-about-your-thoughts-and-feelings-becoming-real-what-would-happen-if-they-were-real"&gt;Why are you worried about your thoughts and feelings becoming &lt;em&gt;real&lt;/em&gt;? What would happen if they were &lt;em&gt;real&lt;/em&gt;?&lt;/h4&gt;

&lt;p&gt;Oof. If they’re real I have to deal with them. I guess I’m afraid that I can’t deal with them. I’m also pretty sure that some of my feelings (jealousy, heartbreak) make me stupid. See above point about fear of being stupid.&lt;/p&gt;

&lt;h3 id="i-then-tried-to-reframe-those-thoughts-and-eliminate-the-obstacles"&gt;I then tried to reframe those thoughts and eliminate the obstacles&lt;/h3&gt;

&lt;h4 id="journals-dont-have-to-be-a-fluent-account"&gt;Journals don’t have to be a fluent account&lt;/h4&gt;

&lt;p&gt;It’s your space to write whatever the fuck you want, however the fuck you want to. You don’t have to share these with anyone, no one else need read them. You can burn them after you write them if you want to. You don’t have to give anyone context. Keep your purpose in mind—you want to journal so that you can work through your feelings. So do that. Don’t feel bound by popular media’s expectations of what a journal is.&lt;/p&gt;

&lt;p&gt;The rule I made was &lt;strong&gt;No Catchups, just dive right in&lt;/strong&gt;. This eliminates my guilt if I’ve avoided writing for days/weeks/months. There’s no reason for me to continue to avoid my journal, I can just dive right into my current thoughts.&lt;/p&gt;

&lt;h4 id="its-okay-if-your-writing-is-bad-embarrassing-or-stupid"&gt;It’s okay if your writing is bad, embarrassing, or stupid&lt;/h4&gt;

&lt;p&gt;There’s a lot more to unpack here, but basically, it’s okay if my writing is any of the above. My writing probably isn’t worse, more embarassing, or stupider than the next person’s, but even if it is, that’s okay. No one’s reading this, no one’s keeping score.&lt;/p&gt;

&lt;p&gt;The rule I made was &lt;strong&gt;Be as dumb as you like, and don’t judge your thoughts&lt;/strong&gt;. That means whenever I’m hesistating because a voice in my brain is saying “That sounds dumb”, I can silence that thought because I’ve already decided that dumb is just fine in my journal.&lt;/p&gt;

&lt;h4 id="your-feelings-are-already-real"&gt;Your feelings are already real&lt;/h4&gt;

&lt;p&gt;A few years ago, a friend pointed me towards &lt;a href="https://wiki.lesswrong.com/wiki/Litany_of_Gendlin"&gt;The Litany of Gendlin&lt;/a&gt;, which has stuck with me. In short:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What is true is already so.
Owning up to it doesn't make it worse.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Writing down my feelings doesn’t make them real because they are already real. Writing them down just helps me focus on them and deal with them, instead of denying them and avoiding them (which I’m reeealllly good at). The quicker I can start dealing with things that are bothering me, the better. I am definitely capable of dealing with them, because I am &lt;em&gt;already&lt;/em&gt; living with them.&lt;/p&gt;

&lt;p&gt;The rule I made was &lt;strong&gt;Remember the Litany of Gendlin&lt;/strong&gt;. If I found myself hesitating, I would repeat the litany, then continue writing.&lt;/p&gt;

&lt;h3 id="habit"&gt;Habit&lt;/h3&gt;

&lt;p&gt;With my rules set, I next worked on establishing a habit. I re-read &lt;a href="https://www.goodreads.com/book/show/615570.The_Artist_s_Way"&gt;The Artist’s Way&lt;/a&gt;, which is a book that has many, many faults, but a few gems of wisdom. On of the key tennets is that you don’t have to be in a particular mood in order to be creative. Creativity is a habit. The author suggests that everyone write three pages a day, every day, longhand with pen and paper. So that’s what I do.&lt;/p&gt;

&lt;p&gt;When working digitally, I find it easy to get too caught up in bikeshedding—which tool should I use? Ooh maybe I should try a new tool? But all my other entries are over at the old one! I’ll have to migrate them over! etc. etc. etc. No problems if digital works for you! I’ve just personally found more success with pen and paper. It hurt my hand initially, but after about a week I was fine.&lt;/p&gt;

&lt;p&gt;Oh! I nearly forgot. One thing I also tried was audio journalling, which you could try! I did that once because I was lying in bed in the dark with my thoughts and I needed to get them out of my head but I didn’t want to turn on a light. So I just pulled up the recording app on my phone and talked.&lt;/p&gt;

&lt;p&gt;Most importantly, if I drop a few days, or weeks, (or months, though that hasn’t happened yet), I return with no judgement, no catchups, and no giving myself a hard time.&lt;/p&gt;

&lt;p&gt;If I have nothing to write, I do like Bart Simpson and write the same thing over and over and over again, until I’ve filled three pages. This could be “I have nothing to write” or it could be a phrase or poem or quote that I like—I’ve used the Litany of Gendlin before. Usually this bores me enough to spur me into writing something different.&lt;/p&gt;

&lt;p&gt;Some days I write about things that have happened to me. Other days I write about thoughts that are bothering me. Sometimes I write about people I’ve known, kind of character studies. Occasionally I do a little fiction. Whatever takes my fancy.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;That’s how I got better at journalling. The most important step was all the thinking I did about it beforehand, and the new positive rules I set for myself. The habit-building was secondary to all that, but came easier once I’d removed the guilt and shame that my previous conceptions about journalling caused in me when I missed days or didn’t otherwise journal ‘properly’.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using `Hash#fetch` in Ruby for better nil handling</title>
    <link rel="alternate" href="http://blog.url.com/using-ruby-hash-fetch.html"/>
    <id>http://blog.url.com/using-ruby-hash-fetch.html</id>
    <published>2019-03-13T03:24:24+01:00</published>
    <updated>2019-07-26T20:23:34+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="using-hashfetch-in-ruby-for-better-nil-handling"&gt;Using &lt;code&gt;Hash#fetch&lt;/code&gt; in Ruby for better nil handling&lt;/h1&gt;

&lt;p&gt;Pulling values out of a Hash in Ruby is simple with the &lt;code&gt;[]&lt;/code&gt; method, but problems can occur when the value you’re looking up isn’t there. This can result in cumbersome nil checks, or our absolute favourite error  &lt;code&gt;Undefined method for nil:NilClass&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at an example of a classifieds site that sorts its listings when displaying them for the user, and some of the ways we can use &lt;code&gt;Hash#fetch&lt;/code&gt; to proactively handle those nils before they happen.&lt;/p&gt;

&lt;p&gt;Just a quick note on the code—these examples are moderately contrived and not necessarily how you’d solve these problems in production, but hey, at least they illustrate my points!&lt;/p&gt;

&lt;h2 id="using-hashfetch-to-set-a-default"&gt;Using Hash#fetch to set a default&lt;/h2&gt;

&lt;p&gt;```ruby
def index
  valid_sort_orders = {
  lowest_price: :asc,
  highest_price: :desc
  }&lt;/p&gt;

&lt;p&gt;sort_order = valid_sort_orders[listings_params[:sort]]&lt;/p&gt;

&lt;p&gt;@listings = Listing.order(price: sort_order)
end
```&lt;/p&gt;

&lt;p&gt;We have a problem here—what if the &lt;code&gt;sort&lt;/code&gt; parameter is not provided by the user, or they provide something that’s invalid? There’s many ways to handle this problem, for example, we could set a default with the &lt;code&gt;||&lt;/code&gt; operator. This is a pretty common pattern, and a perfectly fine way to handle this case.&lt;/p&gt;

&lt;p&gt;```ruby
def index
  valid_sort_orders = {
    lowest_price: :asc,
    highest_price: :desc
  }&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;sort_order = valid_sort_orders[listings_params[:sort]]&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;:asc&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;@listings = Listing.order(price: sort_order)
end
```&lt;/p&gt;

&lt;p&gt;Personally, I prefer to use the &lt;code&gt;Hash#fetch&lt;/code&gt; method for a slightly more elegant solution. With &lt;code&gt;Hash#fetch&lt;/code&gt;, if a key is not found in a hash, we can provide a default key to look for, which is quite a nice way to handle our nil situation.&lt;/p&gt;

&lt;p&gt;```ruby
def index
  valid_sort_orders = {
    lowest_price: :asc,
    highest_price: :desc
  }&lt;/p&gt;

&lt;p&gt;sort_order = valid_sort_orders.fetch(listings_params[:sort], :asc)&lt;/p&gt;

&lt;p&gt;@listings = Listing.order(price: sort_order)
end
```&lt;/p&gt;

&lt;p&gt;Semantics alone aren’t a great reason to use this pattern though, so lets look at some more interesting examples where &lt;code&gt;Hash#fetch&lt;/code&gt; can be used to proactively handle nils.&lt;/p&gt;

&lt;h2 id="using-hashfetch-to-set-a-falsey-value"&gt;Using &lt;code&gt;Hash#fetch&lt;/code&gt; to set a falsey value&lt;/h2&gt;

&lt;p&gt;This pattern is useful when you want to accept falsey values from a caller, but default to a truthy value. Let’s look at an example.&lt;/p&gt;

&lt;p&gt;Here we want to be able to control with parameters whether to include a seller’s details in the response, with a default value of &lt;code&gt;true&lt;/code&gt;.  It’s easy to accidentally do something like this:&lt;/p&gt;

&lt;p&gt;```ruby
def index
  @include_seller_details = listings_params[:include_metadata] || true&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;valid_sort_orders = {
lowest_price: :asc,
highest_price: :desc   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sort_order = valid_sort_orders.fetch(listings_params[:sort], :asc)&lt;/p&gt;

&lt;p&gt;@listings = Listing.order(price: sort_order)
end
```&lt;/p&gt;

&lt;p&gt;Which is not going to work correctly! Because if &lt;code&gt;listing_params[:include_metadata]&lt;/code&gt; is a falsey value, this will evaluate to &lt;code&gt;true&lt;/code&gt; anyway. It’s probably not disasterous, but it means that we’re going to be sending more information in the response than we want to, which is impolite at best and could be a security concern at worst.&lt;/p&gt;

&lt;p&gt;One way to fix this would be to use &lt;code&gt;Hash#fetch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;```ruby
def index
  @include_seller_details = listing_params.fetch(:include_metadata, true)&lt;/p&gt;

&lt;p&gt;valid_sort_orders = {
    lowest_price: :asc,
    highest_price: :desc
  }&lt;/p&gt;

&lt;p&gt;sort_order = valid_sort_orders.fetch(listings_params[:sort], :asc)&lt;/p&gt;

&lt;p&gt;@listings = Listing.order(price: sort_order)
end
```&lt;/p&gt;

&lt;p&gt;In this example, if there is any value at &lt;code&gt;:include_metadata&lt;/code&gt;, including a falsey value, it will be set, which is exactly what we want.&lt;/p&gt;

&lt;h2 id="run-a-block-of-code-if-you-dont-find-what-youre-looking-for"&gt;Run a block of code if you don’t find what you’re looking for&lt;/h2&gt;

&lt;p&gt;In the case where you don’t find what you’re looking for in a hash, returning a default value is nice, as we’ve seen. Sometimes, though, a simple value won’t do, and you might want to run a block of code as a fallback instead. &lt;code&gt;Hash#fetch&lt;/code&gt; accepts a block to help you achieve this, which is pretty nifty!&lt;/p&gt;

&lt;p&gt;In this example, if a user sends an invalid sort order to the API, we will record that in an analytics service. That will help us decide if we want to build that feature for our users next. If a lot of users are requesting to order Listings by &lt;code&gt;popular&lt;/code&gt; or &lt;code&gt;new&lt;/code&gt;, it’s handy for us to know that. So, we’ll report the value, then return the default.&lt;/p&gt;

&lt;p&gt;```ruby
def index
  @include_seller_details = listing_params.fetch(:include_metadata, true)&lt;/p&gt;

&lt;p&gt;valid_sort_orders = {
    lowest_price: :asc,
    highest_price: :desc
  }&lt;/p&gt;

&lt;p&gt;sort_order = valid_sort_orders.fetch(listings_params[:sort]) do |value|
    Analytics.report("user requested to sort listings by #{value}")
    :asc
  end&lt;/p&gt;

&lt;p&gt;@listings = Listing.order(price: sort_order)
end
```&lt;/p&gt;

&lt;h2 id="safer-handling-of-environment-variables-with-hashfetch"&gt;Safer handling of environment variables with &lt;code&gt;Hash#fetch&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Poor handling of environment variables can make for some pretty disasterous outcomes (…ask me how I know). After being bitten more than once, I like to use &lt;code&gt;Hash#fetch&lt;/code&gt; when retrieving environment variables.&lt;/p&gt;

&lt;p&gt;This is especially important if you are using environment variables to feature flag releases, or if adding/removing environment variables is something that is handled separately to your normal code deploy process.&lt;/p&gt;

&lt;p&gt;code expecting an environment variable + a silent failure if it’s not there + failing to correctly set an environment variable = potentially very costly mistake&lt;/p&gt;

&lt;p&gt;:upside_down_face:&lt;/p&gt;

&lt;p&gt;```ruby
def index
  seasonal_discount = ENV["SEASONAL_DISCOUNT"]&lt;/p&gt;

&lt;p&gt;valid_sort_orders = {
    lowest_price: :asc,
    highest_price: :desc
  }&lt;/p&gt;

&lt;p&gt;sort_order = valid_sort_orders.fetch(listings_params[:sort], :asc)&lt;/p&gt;

&lt;p&gt;@listings = Listing.order(price: sort_order)&lt;/p&gt;

&lt;p&gt;if seasonal_discount
    @listings = @listings.map(&amp;amp;:apply_seasonal_discount)
  end
end
```&lt;/p&gt;

&lt;p&gt;In this case, if someone fails to set the &lt;code&gt;SEASONAL_DISCOUNT&lt;/code&gt; environment variable, we might fail to notice because nothing here is going to throw an error. Our customers will miss out on a good deal!&lt;/p&gt;

&lt;p&gt;We can use &lt;code&gt;Hash#fetch&lt;/code&gt; so that this fails noisily when no env var is found.&lt;/p&gt;

&lt;p&gt;```ruby
def index
  seasonal_discount = ENV.fetch("SEASONAL_DISCOUNT")&lt;/p&gt;

&lt;p&gt;valid_sort_orders = {
    lowest_price: :asc,
    highest_price: :desc
  }&lt;/p&gt;

&lt;p&gt;sort_order = valid_sort_orders.fetch(listings_params[:sort], :asc)&lt;/p&gt;

&lt;p&gt;@listings = Listing.order(price: sort_order)&lt;/p&gt;

&lt;p&gt;if seasonal_discount
    @listings = @listings.map(&amp;amp;:apply_seasonal_discount)
  end
end
```&lt;/p&gt;

&lt;p&gt;If no environment variable is found, this will fail noisily and your code probably won’t even deploy correctly. You could also choose to set a default if it makes more sense to do so, but there are often cases when a noisy failure is preferable.&lt;/p&gt;

&lt;h3 id="those-are-some-of-my-favourite-uses-for-hashfetch-its-a-really-useful-tool-for-any-rubyist-and-i-think-its-good-to-remember-that--is-not-the-only-way-to-retrieve-values-from-a-hash"&gt;Those are some of my favourite uses for &lt;code&gt;Hash#fetch&lt;/code&gt;. It's a really useful tool for any Rubyist, and I think it’s good to remember that &lt;code&gt;[]&lt;/code&gt; is not the only way to retrieve values from a Hash.&lt;/h3&gt;
</content>
  </entry>
  <entry>
    <title>What is State? Why do I need to manage it?</title>
    <link rel="alternate" href="http://blog.url.com/what-is-state.html"/>
    <id>http://blog.url.com/what-is-state.html</id>
    <published>2018-09-13T22:17:42+02:00</published>
    <updated>2019-07-26T20:23:34+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1 id="read-my-thoughts-on-state-over-at-eggheadhttpseggheadioarticleswhat-is-state-why-do-i-need-to-manage-it"&gt;Read my thoughts on state over at &lt;a href="https://egghead.io/articles/what-is-state-why-do-i-need-to-manage-it"&gt;egghead&lt;/a&gt;&lt;/h1&gt;
</content>
  </entry>
  <entry>
    <title>Creating a Welcoming Space for Beginners</title>
    <link rel="alternate" href="http://blog.url.com/creating-a-welcoming-space-for-beginners.html"/>
    <id>http://blog.url.com/creating-a-welcoming-space-for-beginners.html</id>
    <published>2016-03-19T19:16:21+01:00</published>
    <updated>2019-07-26T20:23:34+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Before I became a programmer, I was a teacher. For the most part, I taught academic English to speakers of other languages at a University. Although I’ve switched careers, I find that my teaching experience becomes applicable very frequently in my job, and I love taking on a teaching role whenever I can.&lt;/p&gt;

&lt;p&gt;About a year ago, I studied at &lt;a href="http://devacademy.co.nz"&gt;Enspiral Dev Academy&lt;/a&gt;, a coding bootcamp based in Wellington, New Zealand. After completing EDA, I worked there as a teaching assistant, helping bootcamp students navigate the course, providing help with coding challenges, and helping to develop the curriculum.&lt;/p&gt;

&lt;p&gt;I’m also part of the team that organises &lt;a href="http://www.meetup.com/WellingtonRailsn00bs/"&gt;RailsN00bs&lt;/a&gt; — it’s a meetup group that meets once every three-ish weeks in Wellington. We’re open to all people who want to learn about Rails, or get into programming. We get a wide variety of attendees every session — folks who are professional programmers, who have been programming in other languages for many years, but want to learn about Ruby and Rails; People who have never seen command line before and have never written a line of code, but would like to learn; People who have been teaching themselves online, and want to connect with other programmers IRL.&lt;/p&gt;

&lt;p&gt;So, I’m frequently a beginner, but I’m also frequently in a position where I am helping and guiding other beginners, at many stages of their career. From my experiences, I’ve learned a few things about helping beginners, which I shared at a talk at RailsCamp NZ 2016, and have subsequently written up here.&lt;/p&gt;

&lt;p&gt;So. How can you create a welcoming space for beginners?&lt;/p&gt;

&lt;h3 id="constant-reassurance"&gt;CONSTANT REASSURANCE&lt;/h3&gt;

&lt;p&gt;It’s important to frequently reassure beginners that it’s okay to ask questions, even (or especially) if they seem ‘dumb’ or ‘simple’. Often when I’m learning something new, the person teaching me or the group will say this &lt;em&gt;once&lt;/em&gt;. It’s important to re-iterate this often, though. Beginners frequently feel intimidated and unsure of themselves, so frequent reminders that it’s okay to ask questions, it’s completely cool to not know something, and that it’s fine to be wrong about things, are always welcome. Remind people multiple times, every day, until your audience becomes comfortable asking questions. If your learners seem reticent, it’s your job to remind them, and encourage them.&lt;/p&gt;

&lt;h3 id="never-ask-does-that-make-sense"&gt;Never ask ‘Does that make sense?’&lt;/h3&gt;

&lt;p&gt;This was the first thing I learned in teacher training. Never talk at a learner and then ask ‘Does that make sense?’&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;Let’s be honest, when someone asks you ‘does that make sense?’, your immediate instinct is to reply ‘yes’, even when it doesn’t. You want to please the teacher by giving them the answer that they want.&lt;/p&gt;

&lt;p&gt;Let’s be even more honest — most of the time when someone asks you ‘does that make sense?’ you haven’t even had enough time to parse and analyse the information that they’ve given you, so you actually have no idea whether or not it makes sense at all. So, you’ll reply ‘yes’, because the asker is waiting for an answer and wants to move on. It’s only later on, when you try to implement the knowledge that has been given to you, do you realise that the explanation didn’t make sense at all.&lt;/p&gt;

&lt;p&gt;So what to do instead?&lt;/p&gt;

&lt;p&gt;Ask specific questions. Ask questions directly related to the information you’re trying to impart. For example: “Can anyone tell me what sorts of attributes at User model might have?”, or “Who can tell me what a controller does?”&lt;/p&gt;

&lt;p&gt;By asking specific and relevant questions, you’ll be able to gauge your learners’ understanding of what you’re trying to teach. If no one can answer, you need to refactor your explanation!&lt;/p&gt;

&lt;h3 id="embrace-silence"&gt;Embrace silence&lt;/h3&gt;

&lt;p&gt;After asking a question, and receiving no answer, wait three seconds longer than you usually might before answering your own question. Embrace that slightly awkward silence, and give your learners a little more time to formulate words. You might be surprised at how often, in those three seconds, someone hesitantly raises a hand, and gives an answer that’s spot on. In fact, even if the learner’s answer isn’t quite right, getting them comfortable having a go at answering a question is valuable in itself.&lt;/p&gt;

&lt;p&gt;Too often, I find that teachers and presenters move on too quickly. Taking the time to slow down and having a learner answer a question can be hugely valuable for everyone — you might learn a new perspective, or if a learner answers wrongly, it might shed light on a mistake that you’ve made in explaining a concept. By seeing a learner answer a question, other learners will gain confidence in their own abilities to do so, and perhaps pipe up next time. Just give them those three seconds.&lt;/p&gt;

&lt;h3 id="define-everything"&gt;Define everything&lt;/h3&gt;

&lt;p&gt;Perhaps this is my background in English teaching coming through, but I am a big fan of defining jargon right off the bat, to lower the barrier-to-entry for beginners. At Railsn00bs, when we do our Intro to Rails session, the first thing we do is create a new Rails project, and bring up the default welcome page that every Rails project comes with. There’s lots of helpful info on that page, but it’s littered with jargon.&lt;/p&gt;

&lt;p&gt;We start of by highlighting every piece of jargon on that page and asking the class to help us define each of the terms — models, views, controllers, migrations, and so on. We write down the definitions, and save them to refer to throughout the session, and for learners to access later when the session is over.&lt;/p&gt;

&lt;p&gt;Not only does this serve to get everyone on the same page, it also gets learners thinking about what they already know, and thinking about how to apply that to Rails. Building this confidence early is really important to getting learners excited about Rails and trying new things.&lt;/p&gt;

&lt;h3 id="use-real-world-examples"&gt;Use real-world examples&lt;/h3&gt;

&lt;p&gt;When helping beginners, use real-world examples where possible. At Railsn00bs, we often build a project such as a super simple blog, or gallery. Something that learners are familiar with, and that we can talk about by relating to already familiar concepts. People generally have an idea of what a User, a Post, or a Category are. We use that prior knowledge, and build from there.&lt;/p&gt;

&lt;p&gt;Where possible, avoid &lt;code&gt;foo&lt;/code&gt;, and &lt;code&gt;bar&lt;/code&gt;, and &lt;code&gt;baz&lt;/code&gt;. I find that learning something new is often stressful enough, and talking only in abstractions can be even more intimidating for beginners. Don’t make someone think more than they have to! Take the guesswork away by providing something more solid for the learner grasp on to.&lt;/p&gt;

&lt;h3 id="praise"&gt;Praise&lt;/h3&gt;

&lt;p&gt;Get into the habit of enthusiastically praising your learners for trying things, for getting things right, and for working hard. It can feel awkward (particularly for Kiwis — we can be a reticent lot), but as a learner, I certainly appreciate a few words of praise. That sort of encouragement can help keep me going when I’m stuck on something, or when I’m finding things particularly hard. It can be the difference between giving up, and trucking on.&lt;/p&gt;

&lt;p&gt;On that note, thanks for reading, reader. I hope you found a small nugget in here, something that you can take away and use in your day-to-day work, or try out the next time you’re in a position to teach. I’d love to hear more about your strategies and experiences, as a learner, as a teacher, or both. Comment here, or chat to me on &lt;a href="http://www.twitter.com/raquelxmoss"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Becoming Comfortable with Being Uncomfortable</title>
    <link rel="alternate" href="http://blog.url.com/becoming-comfortable-with-being-uncomfortable.html"/>
    <id>http://blog.url.com/becoming-comfortable-with-being-uncomfortable.html</id>
    <published>2016-02-18T15:43:26+01:00</published>
    <updated>2019-07-26T20:23:34+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://www.raquelmoss.com/unnatural/"&gt;Last time I blogged&lt;/a&gt; I wrote about how programming was something that comes unnaturally to me. The post seemed to resonate with lots of people — several reached out to share their own experiences, which was extremely encouraging. If you ever want to chat to me about the id, the ego, the superego, and programming, by all means do!&lt;/p&gt;

&lt;p&gt;What I didn’t really explain very well in that blog post is how I get things done, on a day-to-day basis, if the stuff that I’m doing doesn’t come to me naturally. The answer, simply, is to get used to being uncomfortable.&lt;/p&gt;

&lt;p&gt;Doing things that you’re not naturally great at is uncomfortable. Every step of learning is a struggle and you’re constantly battling your own limitations. The most common feeling I have is that I can recognise good code when I see it, but I’m damned if I can implement those same techniques in my own work. I guess it’s like any language — often learners are able to read and listen a lot better than they can speak and write. Unfortunately for me, Spanish verb conjugations make a lot more sense to me than programming design patterns.&lt;/p&gt;

&lt;p&gt;It’s okay though. I’m not an expert at this by any means, but I’m learning to embrace the discomfort and get shit done. When I go to work, or sit down to do some coding on a personal project, I know that I’m going to experience a lot of frustration. I know that whatever I do, I’m going to run into things that I don’t understand. Or, more likely (and more frustratingly), I’ll encounter concepts that I &lt;em&gt;almost&lt;/em&gt; understand, but are just outside my grasp enough that I struggle to recreate what I’m seeing.&lt;/p&gt;

&lt;p&gt;I also know that I am going to experience fear. The main fear I experience when starting a project is that, obviously, I’m not going to be able to do it. This is a trap! If I let this fear put me off, I can dither for weeks before trying anything. It’s a silly, unfounded, and generally unhelpful fear that can stall my productivity for too long.&lt;/p&gt;

&lt;p&gt;To give you an example: for several weeks I had been putting off writing the code for API authentication in my personal project. It’s something I hadn’t done before, didn’t really understand, and didn’t really know who to consult about. I knew that it would be a frustrating process and I just wanted it to be magically done for me. So… I didn’t do it. For weeks. I let my project stagnate, and the guilt build up as my Github streak floundered and faded.&lt;/p&gt;

&lt;p&gt;Finally, yesterday, while lying in bed with a terrible hangover and gassy cat (my Sundays are generally this glamorous, yes), I decided just to get that shit done. I found some resources online, I trialled and I errored for an hour or two. Surprisingly, it works! But even if I hadn’t reached working code, I shouldn’t have let that stop me.&lt;/p&gt;

&lt;p&gt;Too often I’m afraid to program because my work won’t be ‘perfect’. I’m scared that people will tell me that I’m doing everything wrong, that I’m a terrible programmer, and that I should go back to my books and verb conjugations.&lt;/p&gt;

&lt;p&gt;The thing is, though, coding is not a competition. I know it feels like it, most of the time. It is so easy to compare yourself to others who are smarter, quicker, and more productive to you — especially with everyone blogging, sharing their projects on Github, speaking at conferences, and tweeting about all of the above. But comparison is the thief of joy, and when I start comparing myself to others I can easily spiral into a grumpy and counter-productive mood.&lt;/p&gt;

&lt;p&gt;You know where this advice is leading: compare yourself to your past self, celebrate your own successes, and learn everything you can from others. You’ve heard it before, countless times. But that shit is &lt;em&gt;hard&lt;/em&gt;. When you’re deep in a period of discomfort, you feel like everything you do is sub-par, and that your successes are puny, it is &lt;em&gt;hard&lt;/em&gt; to be happy for other people and to focus on your own growth.&lt;/p&gt;

&lt;p&gt;I don’t really have any helpful advice for you on how to work through that. But just try to remember these things:&lt;/p&gt;

&lt;p&gt;If your code doesn’t work, it’s okay. You probably learned something along the way, right?&lt;/p&gt;

&lt;p&gt;If your code is terrible, it’s okay. During the process, you probably ran into a whole bunch of problems, and you’ll know how to do things different next time, right?&lt;/p&gt;

&lt;p&gt;If you’re afraid to start something because you don’t think you can do it, just start it, okay? If you need to, set a timer for an hour, or even just half an hour, and see how far you get. You’ll figure things out as you go. And if you don’t, see the first point above.&lt;/p&gt;

&lt;p&gt;If you’re trying, you are learning. If you’re learning, you are growing. The only way to get better is to keep on learning and growing. Amazing skills aren’t just going to magically manifest while you sleep. You’re going to have to struggle onwards. I’m sorry, that sucks. I don’t make the rules, and all I can offer is solidarity.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Continuing your learning as a post-beginner programmer (part 1)</title>
    <link rel="alternate" href="http://blog.url.com/continuing-your-learning-as-a-post-beginner-programmer-part-1.html"/>
    <id>http://blog.url.com/continuing-your-learning-as-a-post-beginner-programmer-part-1.html</id>
    <published>2016-02-18T15:43:20+01:00</published>
    <updated>2019-07-26T20:23:34+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;If you’re anything like me, your process for learning something new — say, a javascript framework, a design pattern, or a language — looks something like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Read the documentation, check out a basic tutorial, and get Hello World up and running, pat yourself on the back.&lt;/li&gt;
  &lt;li&gt;Look up several tutorials, pick the least intimidating-looking one, and make a basic app — something like a To Do List.&lt;/li&gt;
  &lt;li&gt;???&lt;/li&gt;
  &lt;li&gt;Profit?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’re going to focus on the ??? part. By the time you’ve reached step two in the process, you’re probably feeling pretty damn good about yourself. You’ve glimpsed some of the potential of The New Thing, you’ve implemented a few basic concepts, and perhaps you’ve even solved a few problems. You’re probably excited to start building stuff with The New Thing. Let’s do it!&lt;/p&gt;

&lt;h3 id="umm-okay-now-what"&gt;Umm…. okay. Now what?&lt;/h3&gt;

&lt;h2 id="first-dont-panic"&gt;First, Don’t Panic.&lt;/h2&gt;

&lt;p&gt;In my experience, if you panic, you will dither, and you will never get anything done. This part is scary — there’s a whole world of options to explore and decisions to be made. You might feel a bit like you do when you’re at the supermarket — dazed by all the bright lights and trying to select a pack of toilet paper from a wall full of options.&lt;/p&gt;

&lt;p&gt;Let’s mitigate that panic somewhat.&lt;/p&gt;

&lt;p&gt;First things first:&lt;/p&gt;

&lt;h3 id="be-kind-to-yourself"&gt;Be kind to yourself.&lt;/h3&gt;

&lt;h3 id="please-remember-that-all-of-the-following-things-are-totally-okay"&gt;Please remember that all of the following things are totally okay:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span style="font-weight: 400;"&gt;Abandoned repos&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;span style="font-weight: 400;"&gt;Not coding for weeks or months&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;span style="font-weight: 400;"&gt;Getting completely stuck&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;span style="font-weight: 400;"&gt;Deciding you don’t actually want to learn The New Thing&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;span style="font-weight: 400;"&gt;Failure&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seriously. If you try to make some things with code and it doesn’t work, no one is going to sit you down and tell you you’re failure, or a terrible person, or that you’ll never be worthy. I can almost guarantee you that people are going to be extremely impressed that you are trying and learning new things, being creative, and tackling problems. If yourself tries to tell yourself that you suck, please try to stop yourself.&lt;/p&gt;

&lt;h3 id="okay-were-not-panicking-were-okay-with-the-possibility-of-failure-now-what-do-we-build"&gt;Okay. We’re not panicking, we’re okay with the possibility of failure. Now, what do we build?&lt;/h3&gt;

&lt;p&gt;Figuring out what to build can be pretty intimidating, right? You want to make something useful, or cool, or innovative, or creative. If you don’t have a specific idea, though, don’t try to force an idea to materialise, and don’t let that discourage you from forging onwards. My suggestion is to have a standard app that you build when you’re learning something new. For me, it’s a messaging app. I try to make an app that has users, who send messages to each other. Maybe the messages have different states (‘sent’, ‘read’).&lt;/p&gt;

&lt;h3 id="why-do-this"&gt;Why do this?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Because you can start right now! You don’t have to wait for an amazing idea to come (incidentally, don’t worry — the ideas will come. Be patient).&lt;/li&gt;
  &lt;li&gt;If it’s something you’ve made before, you can relax a little because a whole lot of decisions have already been made for you (for instance, your data model). You can focus your brainspace on The New Thing.&lt;/li&gt;
  &lt;li&gt;You could even clone something that already exists — Reddit, Twitter, IMDB, for example&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My second piece of advice is to have an app that you continually add to as you progress in your learning. It’s a lot less intimidating than starting a fresh project each time, and it will give you experience in maintaining and improving projects, which is a huge part of life as a professional developer. Your learning progress might look something like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span style="font-weight: 400;"&gt;Build a Ruby on Rails app&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;Create a snazzy front-end for your Rails app with a Javascript framework, like React&lt;/li&gt;
  &lt;li&gt;Implement a Flux-type architecture so that you can organise your React in a way that makes more sense&lt;/li&gt;
  &lt;li&gt;Learn how to test Javascript and add tests to your React&lt;/li&gt;
  &lt;li&gt;Make your app responsive by learning and implementing Flexbox and Sass&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Iterating continually over an existing project can be really satisfying — you improve your project, you improve your skills, and each time you’re able to focus directly on The New Thing you’re learning.&lt;/p&gt;

&lt;p&gt;In &lt;a href="http://www.raquelmoss.com/continuing-your-learning-as-a-post-beginner-programmer-part-2/"&gt;part two&lt;/a&gt; and &lt;a href="http://www.raquelmoss.com/continuing-your-learning-as-a-post-beginner-programmer-part-3/"&gt;part three&lt;/a&gt;, we’ll be looking at other types of projects you can build while you’re learning, taking detours, and what to do when you get stuck.&lt;/p&gt;
</content>
  </entry>
</feed>
